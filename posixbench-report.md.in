## POSIX Benchmark Results

## Environment

System information:

```
$UNAME
```

CPU information:

```
$CPUINFO
```

## Benchmark Results

### Retrieve current time

The time between two consecutive executions of `clock_gettime` without doing anything.

This benchmark shows the baseline measurement overhead.

![pthread-gettime](bench-gettime.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-gettime.cpp)] [[CSV](bench-gettime.csv)]

### Yield the processor (process)

The time it takes for a process to run again after yielding the processor with `pthread_yield`.

![pthread-yield](bench-yield.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-yield.cpp)] [[CSV](bench-yield.csv)]

### Create a thread

The time it takes for a new thread to run for the first time, which approximates the time to create a new thread.

![pthread-create](bench-pthread-create.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pthread-create.cpp)] [[CSV](bench-pthread-create.csv)]

### Yield the processor (thread)

The time it takes for a thread to run again after yielding the processor with `pthread_yield`.

![pthread-yield](bench-pthread-yield.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pthread-yield.cpp)] [[CSV](bench-pthread-yield.csv)]

### Acquire and release a mutex

The time it takes for a thread to acquire and release a mutex that is under contention.

![pthread-mutex](bench-pthread-mutex.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pthread-mutex.cpp)] [[CSV](bench-pthread-mutex.csv)]

### Acquire and release a rwlock

### Read lock

The time it takes for a thread to acquire and release a rwlock that is under contention for _reading_.

![pthread-rwlock](bench-pthread-rwlock-rd.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pthread-rwlock-rd.cpp)] [[CSV](bench-pthread-rwlock-rd.csv)]

### Write lock

The time it takes for a thread to acquire and release a rwlock that is under contention for _writing_.

![pthread-rwlock](bench-pthread-rwlock-wr.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pthread-rwlock-wr.cpp)] [[CSV](bench-pthread-rwlock-wr.csv)]

### Acquire and release a spinlock

The time it takes for a thread to acquire and release a spinlock that is under contention.

![pthread-spinlock](bench-pthread-spinlock.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pthread-spinlock.cpp)] [[CSV](bench-pthread-spinlock.csv)]

### Page fault

The time it takes for a thread to take a page fault.

![pthread-pagefault](bench-pagefault.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-pagefault.cpp)] [[CSV](bench-pagefault.csv)]

### Thread notification (eventfd, blocking)

The time it takes for a thread to wake up when another thread notifies it via eventfd.

![pthread-eventfd](bench-eventfd.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-eventfd.cpp)] [[CSV](bench-eventfd.csv)]

### Thread notification (eventfd, non-blocking)

The time it takes for a thread to wake up when another thread notifies it via eventfd using `EFD_NONBLOCK`.

![pthread-eventfd-nonblock](bench-eventfd-nonblock.png)

[[Benchmark](https://github.com/penberg/posixbench/blob/master/bench-eventfd-nonblock.cpp)] [[CSV](bench-eventfd-nonblock.csv)]
